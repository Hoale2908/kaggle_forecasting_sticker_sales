{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":85723,"databundleVersionId":10652996,"sourceType":"competition"},{"sourceId":217363922,"sourceType":"kernelVersion"}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport os","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:51:50.384400Z","iopub.execute_input":"2025-01-13T04:51:50.384797Z","iopub.status.idle":"2025-01-13T04:51:50.815287Z","shell.execute_reply.started":"2025-01-13T04:51:50.384767Z","shell.execute_reply":"2025-01-13T04:51:50.814128Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/preprocessing-forecasting-sticker-sales/train_new.csv')\ntest = pd.read_csv('/kaggle/input/preprocessing-forecasting-sticker-sales/test_new.csv')\ntest0 = pd.read_csv('/kaggle/input/playground-series-s5e1/test.csv')\ntest.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:51:52.348685Z","iopub.execute_input":"2025-01-13T04:51:52.349267Z","iopub.status.idle":"2025-01-13T04:51:53.213441Z","shell.execute_reply.started":"2025-01-13T04:51:52.349234Z","shell.execute_reply":"2025-01-13T04:51:53.211896Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 98550 entries, 0 to 98549\nData columns (total 16 columns):\n #   Column        Non-Null Count  Dtype  \n---  ------        --------------  -----  \n 0   id            98550 non-null  int64  \n 1   date          98550 non-null  object \n 2   country       98550 non-null  object \n 3   store         98550 non-null  object \n 4   product       98550 non-null  object \n 5   year          98550 non-null  int64  \n 6   month         98550 non-null  int64  \n 7   day           98550 non-null  int64  \n 8   day_of_year   98550 non-null  int64  \n 9   week_of_year  98550 non-null  int64  \n 10  day_of_week   98550 non-null  int64  \n 11  quarter       98550 non-null  int64  \n 12  season        98550 non-null  int64  \n 13  cpi           98550 non-null  float64\n 14  cpi_quarter   98550 non-null  float64\n 15  gdp           98550 non-null  int64  \ndtypes: float64(2), int64(10), object(4)\nmemory usage: 12.0+ MB\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:51:55.976674Z","iopub.execute_input":"2025-01-13T04:51:55.977085Z","iopub.status.idle":"2025-01-13T04:51:56.034756Z","shell.execute_reply.started":"2025-01-13T04:51:55.977056Z","shell.execute_reply":"2025-01-13T04:51:56.033411Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 225016 entries, 0 to 225015\nData columns (total 17 columns):\n #   Column        Non-Null Count   Dtype  \n---  ------        --------------   -----  \n 0   id            225016 non-null  int64  \n 1   date          225016 non-null  object \n 2   country       225016 non-null  object \n 3   store         225016 non-null  object \n 4   product       225016 non-null  object \n 5   num_sold      221259 non-null  float64\n 6   year          225016 non-null  int64  \n 7   month         225016 non-null  int64  \n 8   day           225016 non-null  int64  \n 9   day_of_year   225016 non-null  int64  \n 10  week_of_year  225016 non-null  int64  \n 11  day_of_week   225016 non-null  int64  \n 12  quarter       225016 non-null  int64  \n 13  season        225016 non-null  int64  \n 14  cpi           225016 non-null  float64\n 15  cpi_quarter   225016 non-null  float64\n 16  gdp           225016 non-null  int64  \ndtypes: float64(3), int64(10), object(4)\nmemory usage: 29.2+ MB\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"df = df.dropna(axis=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:52:00.406842Z","iopub.execute_input":"2025-01-13T04:52:00.407250Z","iopub.status.idle":"2025-01-13T04:52:00.479327Z","shell.execute_reply.started":"2025-01-13T04:52:00.407218Z","shell.execute_reply":"2025-01-13T04:52:00.478137Z"}},"outputs":[],"execution_count":5},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:52:11.350994Z","iopub.execute_input":"2025-01-13T04:52:11.351395Z","iopub.status.idle":"2025-01-13T04:52:11.412401Z","shell.execute_reply.started":"2025-01-13T04:52:11.351370Z","shell.execute_reply":"2025-01-13T04:52:11.411287Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 221259 entries, 0 to 225015\nData columns (total 17 columns):\n #   Column        Non-Null Count   Dtype  \n---  ------        --------------   -----  \n 0   id            221259 non-null  int64  \n 1   date          221259 non-null  object \n 2   country       221259 non-null  object \n 3   store         221259 non-null  object \n 4   product       221259 non-null  object \n 5   num_sold      221259 non-null  float64\n 6   year          221259 non-null  int64  \n 7   month         221259 non-null  int64  \n 8   day           221259 non-null  int64  \n 9   day_of_year   221259 non-null  int64  \n 10  week_of_year  221259 non-null  int64  \n 11  day_of_week   221259 non-null  int64  \n 12  quarter       221259 non-null  int64  \n 13  season        221259 non-null  int64  \n 14  cpi           221259 non-null  float64\n 15  cpi_quarter   221259 non-null  float64\n 16  gdp           221259 non-null  int64  \ndtypes: float64(3), int64(10), object(4)\nmemory usage: 30.4+ MB\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"# # Decompose time data\n\n# def timedecompose(df):\n\n#     df['date'] = pd.to_datetime(df['date'])\n#     df['year'] = df['date'].dt.year\n#     df['month'] = df['date'].dt.month\n#     df['day'] = df['date'].dt.day\n#     df['day_of_year'] = pd.DatetimeIndex(df['date']).dayofyear\n#     df['week_of_year'] = df['date'].dt.isocalendar().week\n#     df['day_of_week'] = df['date'].dt.dayofweek\n#     df['quarter'] = pd.DatetimeIndex(df['date']).quarter\n#     df['season'] = df['month']%12 // 3 + 1\n\n#     return df\n\n# test = timedecompose(test)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.linear_model import SGDRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_absolute_percentage_error","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:52:21.274294Z","iopub.execute_input":"2025-01-13T04:52:21.274661Z","iopub.status.idle":"2025-01-13T04:52:21.804985Z","shell.execute_reply.started":"2025-01-13T04:52:21.274630Z","shell.execute_reply":"2025-01-13T04:52:21.803719Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"features = test.columns.tolist()\nX_train = df[features]\ny_train = df['num_sold']\nX_train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:52:28.837521Z","iopub.execute_input":"2025-01-13T04:52:28.838146Z","iopub.status.idle":"2025-01-13T04:52:28.910379Z","shell.execute_reply.started":"2025-01-13T04:52:28.838109Z","shell.execute_reply":"2025-01-13T04:52:28.909119Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 221259 entries, 0 to 225015\nData columns (total 16 columns):\n #   Column        Non-Null Count   Dtype  \n---  ------        --------------   -----  \n 0   id            221259 non-null  int64  \n 1   date          221259 non-null  object \n 2   country       221259 non-null  object \n 3   store         221259 non-null  object \n 4   product       221259 non-null  object \n 5   year          221259 non-null  int64  \n 6   month         221259 non-null  int64  \n 7   day           221259 non-null  int64  \n 8   day_of_year   221259 non-null  int64  \n 9   week_of_year  221259 non-null  int64  \n 10  day_of_week   221259 non-null  int64  \n 11  quarter       221259 non-null  int64  \n 12  season        221259 non-null  int64  \n 13  cpi           221259 non-null  float64\n 14  cpi_quarter   221259 non-null  float64\n 15  gdp           221259 non-null  int64  \ndtypes: float64(2), int64(10), object(4)\nmemory usage: 28.7+ MB\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"X_train = X_train.drop(['id','date'], axis=1)\nX_test = test.drop(['id','date'], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:54:33.059758Z","iopub.execute_input":"2025-01-13T04:54:33.060194Z","iopub.status.idle":"2025-01-13T04:54:33.092001Z","shell.execute_reply.started":"2025-01-13T04:54:33.060164Z","shell.execute_reply":"2025-01-13T04:54:33.090841Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"X_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\n# X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.4, random_state=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:55:17.112553Z","iopub.execute_input":"2025-01-13T04:55:17.113002Z","iopub.status.idle":"2025-01-13T04:55:17.252661Z","shell.execute_reply.started":"2025-01-13T04:55:17.112963Z","shell.execute_reply":"2025-01-13T04:55:17.251338Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"___","metadata":{}},{"cell_type":"markdown","source":"## 1. Decision Tree Regressor","metadata":{}},{"cell_type":"code","source":"# train_base = train.copy()\n\n# feature = train_base.columns.drop(['num_sold', 'id'])\n# X_train = train_base[feature]\n# y_train = train_base['num_sold']\n# X_train = pd.get_dummies(X_train, columns=cat)\n# X_test = pd.get_dummies(test, columns=cat)\n\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Define the model\nmodel = DecisionTreeRegressor(random_state=1, max_leaf_nodes=500)\n\n# Fit the model\nmodel.fit(X_train,y_train)\n\n# Predict target\npreds = model.predict(X_test)\n\nsubmission = pd.DataFrame({'id': test.id, 'num_sold': preds})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-13T04:55:44.023694Z","iopub.execute_input":"2025-01-13T04:55:44.024177Z","iopub.status.idle":"2025-01-13T04:55:45.692924Z","shell.execute_reply.started":"2025-01-13T04:55:44.024145Z","shell.execute_reply":"2025-01-13T04:55:45.691808Z"}},"outputs":[],"execution_count":14}]}